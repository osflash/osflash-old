{"version":3,"sources":["themes/index.ts","themes/dark/index.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","routes/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","theme","colors","background","text","title","primary","secundary","Container","styled","div","Dashboard","routes","path","element","App","dark","isLocalhost","Boolean","window","location","hostname","match","register","config","a","navigator","URL","process","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","fetch","headers","response","contentType","get","status","indexOf","reload","ReactDOM","render","document","getElementById"],"mappings":"0YAEO,IAAMA,EAAcC,YAAH,KAQN,qBAAGC,MAAkBC,OAAOC,cACjC,qBAAGF,MAAkBC,OAAOE,QCX1B,GACbC,MAAO,OAEPH,OAAQ,CACNI,QAAS,UACTC,UAAW,UAEXJ,WAAY,OACZC,KAAM,Y,8PCNH,IAAMI,EAAYC,IAAOC,IAAV,KCUPC,EARa,WAC1B,OACE,kBAACH,EAAD,KACE,yCCQSI,EAVU,WACvB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,kBAAC,EAAD,WCSlBC,EATO,WACpB,OACE,kBAAC,IAAD,CAAed,MAAOe,GACpB,kBAACjB,EAAD,MACA,kBAAC,EAAD,Q,uBCbAkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MAAM,2DAQtBC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,2DACuB,kBAAmBC,WAD1C,mBAGF,IAAIC,IAAIC,GAAwBT,OAAOC,SAASS,MAEpDC,SAAWX,OAAOC,SAASU,OALrB,iDAOpBX,OAAOY,iBAAiB,OAAxB,sBAAgC,4BAAAN,EAAA,yDACxBO,EADwB,UACbJ,GADa,WAG1BX,EAH0B,uBAK5BgB,EAAwBD,EAAOR,GALH,SAOtBE,UAAUQ,cAAcC,MAPF,OAU1B,6GACFC,QAAQC,IADN,8GAV0B,uBAc5BC,EAAgBN,EAAOR,GAdK,6CAPZ,2CAAH,sDA2Bfc,EAAe,uCAAG,WAAON,EAAeR,GAAtB,eAAAC,EAAA,+EAEOC,UAAUQ,cAAcX,SAASS,GAFxC,QAEdO,EAFc,QAIPC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAEJA,EAAiBE,cAAgB,WAC/B,GAA+B,cAA3BF,EAAiBG,MACnB,GAAIlB,UAAUQ,cAAcW,WAAY,CAGtCT,QAAQC,IADN,iHAIEb,GAAUA,EAAOsB,UAAUtB,EAAOsB,SAASP,OAC1C,CAELH,QAAQC,IADQ,sCAIZb,GAAUA,EAAOuB,WAAWvB,EAAOuB,UAAUR,OAtBrC,gDA4BJ,4CAChBH,QAAQY,MAAR,UADgB,4CAChB,mBA7BoB,yDAAH,wDAiCff,EAAuB,uCAAG,WAAOD,EAAeR,GAAtB,iBAAAC,EAAA,+EAELwB,MAAMjB,EAAO,CAAEkB,QAAS,CAAE,iBAAkB,YAFvC,UAEtBC,EAFsB,OAItBC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,SAAkC,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,eAN/C,iCAOpB7B,UAAUQ,cAAcC,MAPJ,OAQ1BhB,OAAOC,SAASoC,SARU,wBAU1BlB,EAAgBN,EAAOR,GAVG,0DAaZ,gEAChBY,QAAQC,IADQ,iEAbY,0DAAH,wDCjE7BoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEjD1B,M","file":"static/js/main.7bafeb0d.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: ${({ theme }) => theme.colors.background};\n    color: ${({ theme }) => theme.colors.text};\n  }\n`;\n","export default {\n  title: 'dark',\n\n  colors: {\n    primary: '#C62E65',\n    secundary: '#D63AF9',\n\n    background: '#333',\n    text: '#f5f5f5',\n  },\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n\n  h1 {\n    text-shadow: 1px 1px 2px black, 0 0 1em red, 0 0 0.2em red;\n  }\n`;\n","import React from 'react';\n\nimport { Container } from './styles';\n\nconst Dashboard: React.FC = () => {\n  return (\n    <Container>\n      <h1>OsFlash</h1>\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\n\nconst routes: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"*\" element={<Dashboard />} />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n\nexport default routes;\n","import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\n\nimport { GlobalStyle } from '~/themes';\nimport dark from '~/themes/dark';\n\nimport Routes from './routes';\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={dark}>\n      <GlobalStyle />\n      <Routes />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' || // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport const register = async (config?: Config): Promise<void> => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) return;\n\n    window.addEventListener('load', async () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        await navigator.serviceWorker.ready;\n\n        const message =\n          'This web app is being served cache-first by a service  worker. To learn more, visit https://bit.ly/CRA-PWA';\n        console.log(message);\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nconst registerValidSW = async (swUrl: string, config?: Config): Promise<void> => {\n  try {\n    const registration = await navigator.serviceWorker.register(swUrl);\n\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) return;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            const message =\n              'New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.';\n            console.log(message);\n\n            // Execute callback\n            if (config && config.onUpdate) config.onUpdate(registration);\n          } else {\n            const message = 'Content is cached for offline use.';\n            console.log(message);\n\n            // Execute callback\n            if (config && config.onSuccess) config.onSuccess(registration);\n          }\n        }\n      };\n    };\n  } catch (error) {\n    const message = 'Error during service worker registration:';\n    console.error(`${message} ${error}`);\n  }\n};\n\nconst checkValidServiceWorker = async (swUrl: string, config?: Config): Promise<void> => {\n  try {\n    const response = await fetch(swUrl, { headers: { 'Service-Worker': 'script' } });\n\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n      await navigator.serviceWorker.ready;\n      window.location.reload();\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  } catch (error) {\n    const message = 'No internet connection found. App is running in offline mode.';\n    console.log(message);\n  }\n};\n\nexport const unregister = async (): Promise<void> => {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n\n      await registration.unregister();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from '~/App';\nimport * as serviceWorker from '~/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}